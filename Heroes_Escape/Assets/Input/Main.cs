//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Main.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Main : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Main()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Main"",
    ""maps"": [
        {
            ""name"": ""PlayerMoving"",
            ""id"": ""789b9a37-310d-420e-8b8b-14ba3b7eda5d"",
            ""actions"": [
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Button"",
                    ""id"": ""bcaa5266-97e0-4ea3-9fcf-1e8dbaea0fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""60460c91-bc60-490e-a103-bd7cd06b19bd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""c56415bf-2537-4cd7-9f55-b2ded844c63a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf370874-fd67-4b94-9891-35b622a130d5"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e20d592a-ae6d-405f-992c-63fd1877cbd1"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""852e73dc-5657-4c58-b43d-50241b6966d1"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""SlowTap(duration=0.1)"",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""enemyTect"",
            ""id"": ""f521df84-de64-457d-a359-11ba678c4e66"",
            ""actions"": [
                {
                    ""name"": ""moveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fc1c68be-a07f-4f3f-8fd5-fe8419378725"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveRight"",
                    ""type"": ""Button"",
                    ""id"": ""5424c1c3-e604-4017-82ae-fedd90d1d25d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveUp"",
                    ""type"": ""Button"",
                    ""id"": ""bdc0b297-9f03-49ef-aa91-53cedcd3ef23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveDown"",
                    ""type"": ""Button"",
                    ""id"": ""a7317919-6c65-4a45-ac0f-590692c28884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""agr"",
                    ""type"": ""Button"",
                    ""id"": ""d70d714d-f4de-4401-b222-e13234203bc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""translate"",
                    ""type"": ""Button"",
                    ""id"": ""15769e09-763f-43c7-b671-1f4da13713ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""edb6446e-517d-4211-9442-caa1b96002c4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""moveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4b1fcd9-f2bb-4e45-9362-9ab3b6995d09"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""moveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b31c56a-e42e-4bd0-9382-944f8c4ece1a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""moveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a5298ff-cc88-4ca3-9cac-cda5cc72aa9a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""moveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dca02fed-92e3-439f-8496-61611ff20fb8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""agr"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49edd432-9186-450f-8f38-5e58b23e36fb"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""translate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMoving
        m_PlayerMoving = asset.FindActionMap("PlayerMoving", throwIfNotFound: true);
        m_PlayerMoving_Swipe = m_PlayerMoving.FindAction("Swipe", throwIfNotFound: true);
        m_PlayerMoving_Position = m_PlayerMoving.FindAction("Position", throwIfNotFound: true);
        m_PlayerMoving_Tap = m_PlayerMoving.FindAction("Tap", throwIfNotFound: true);
        // enemyTect
        m_enemyTect = asset.FindActionMap("enemyTect", throwIfNotFound: true);
        m_enemyTect_moveLeft = m_enemyTect.FindAction("moveLeft", throwIfNotFound: true);
        m_enemyTect_moveRight = m_enemyTect.FindAction("moveRight", throwIfNotFound: true);
        m_enemyTect_moveUp = m_enemyTect.FindAction("moveUp", throwIfNotFound: true);
        m_enemyTect_moveDown = m_enemyTect.FindAction("moveDown", throwIfNotFound: true);
        m_enemyTect_agr = m_enemyTect.FindAction("agr", throwIfNotFound: true);
        m_enemyTect_translate = m_enemyTect.FindAction("translate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMoving
    private readonly InputActionMap m_PlayerMoving;
    private IPlayerMovingActions m_PlayerMovingActionsCallbackInterface;
    private readonly InputAction m_PlayerMoving_Swipe;
    private readonly InputAction m_PlayerMoving_Position;
    private readonly InputAction m_PlayerMoving_Tap;
    public struct PlayerMovingActions
    {
        private @Main m_Wrapper;
        public PlayerMovingActions(@Main wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swipe => m_Wrapper.m_PlayerMoving_Swipe;
        public InputAction @Position => m_Wrapper.m_PlayerMoving_Position;
        public InputAction @Tap => m_Wrapper.m_PlayerMoving_Tap;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMoving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovingActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovingActions instance)
        {
            if (m_Wrapper.m_PlayerMovingActionsCallbackInterface != null)
            {
                @Swipe.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnSwipe;
                @Swipe.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnSwipe;
                @Swipe.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnSwipe;
                @Position.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnPosition;
                @Tap.started -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_PlayerMovingActionsCallbackInterface.OnTap;
            }
            m_Wrapper.m_PlayerMovingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Swipe.started += instance.OnSwipe;
                @Swipe.performed += instance.OnSwipe;
                @Swipe.canceled += instance.OnSwipe;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }
        }
    }
    public PlayerMovingActions @PlayerMoving => new PlayerMovingActions(this);

    // enemyTect
    private readonly InputActionMap m_enemyTect;
    private IEnemyTectActions m_EnemyTectActionsCallbackInterface;
    private readonly InputAction m_enemyTect_moveLeft;
    private readonly InputAction m_enemyTect_moveRight;
    private readonly InputAction m_enemyTect_moveUp;
    private readonly InputAction m_enemyTect_moveDown;
    private readonly InputAction m_enemyTect_agr;
    private readonly InputAction m_enemyTect_translate;
    public struct EnemyTectActions
    {
        private @Main m_Wrapper;
        public EnemyTectActions(@Main wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveLeft => m_Wrapper.m_enemyTect_moveLeft;
        public InputAction @moveRight => m_Wrapper.m_enemyTect_moveRight;
        public InputAction @moveUp => m_Wrapper.m_enemyTect_moveUp;
        public InputAction @moveDown => m_Wrapper.m_enemyTect_moveDown;
        public InputAction @agr => m_Wrapper.m_enemyTect_agr;
        public InputAction @translate => m_Wrapper.m_enemyTect_translate;
        public InputActionMap Get() { return m_Wrapper.m_enemyTect; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EnemyTectActions set) { return set.Get(); }
        public void SetCallbacks(IEnemyTectActions instance)
        {
            if (m_Wrapper.m_EnemyTectActionsCallbackInterface != null)
            {
                @moveLeft.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveLeft;
                @moveLeft.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveLeft;
                @moveLeft.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveLeft;
                @moveRight.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveRight;
                @moveRight.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveRight;
                @moveRight.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveRight;
                @moveUp.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveUp;
                @moveUp.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveUp;
                @moveUp.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveUp;
                @moveDown.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveDown;
                @moveDown.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveDown;
                @moveDown.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnMoveDown;
                @agr.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnAgr;
                @agr.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnAgr;
                @agr.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnAgr;
                @translate.started -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnTranslate;
                @translate.performed -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnTranslate;
                @translate.canceled -= m_Wrapper.m_EnemyTectActionsCallbackInterface.OnTranslate;
            }
            m_Wrapper.m_EnemyTectActionsCallbackInterface = instance;
            if (instance != null)
            {
                @moveLeft.started += instance.OnMoveLeft;
                @moveLeft.performed += instance.OnMoveLeft;
                @moveLeft.canceled += instance.OnMoveLeft;
                @moveRight.started += instance.OnMoveRight;
                @moveRight.performed += instance.OnMoveRight;
                @moveRight.canceled += instance.OnMoveRight;
                @moveUp.started += instance.OnMoveUp;
                @moveUp.performed += instance.OnMoveUp;
                @moveUp.canceled += instance.OnMoveUp;
                @moveDown.started += instance.OnMoveDown;
                @moveDown.performed += instance.OnMoveDown;
                @moveDown.canceled += instance.OnMoveDown;
                @agr.started += instance.OnAgr;
                @agr.performed += instance.OnAgr;
                @agr.canceled += instance.OnAgr;
                @translate.started += instance.OnTranslate;
                @translate.performed += instance.OnTranslate;
                @translate.canceled += instance.OnTranslate;
            }
        }
    }
    public EnemyTectActions @enemyTect => new EnemyTectActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IPlayerMovingActions
    {
        void OnSwipe(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnTap(InputAction.CallbackContext context);
    }
    public interface IEnemyTectActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnAgr(InputAction.CallbackContext context);
        void OnTranslate(InputAction.CallbackContext context);
    }
}
