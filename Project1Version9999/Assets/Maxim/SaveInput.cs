//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Maxim/SaveInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SaveInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SaveInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SaveInput"",
    ""maps"": [
        {
            ""name"": ""Saver"",
            ""id"": ""40de0ac1-19f6-4f5d-9a3b-994812999b29"",
            ""actions"": [
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""b9da5c37-ef36-49dd-8fa5-b79134e7c3ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""115583d9-8a99-428d-8833-9f2f84849fce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b505cee1-faf9-469c-8398-c33cae15cdf5"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdd5bc84-616d-4302-bf21-e1158d2816a5"",
                    ""path"": ""<Keyboard>/f7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Saver
        m_Saver = asset.FindActionMap("Saver", throwIfNotFound: true);
        m_Saver_Save = m_Saver.FindAction("Save", throwIfNotFound: true);
        m_Saver_Load = m_Saver.FindAction("Load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Saver
    private readonly InputActionMap m_Saver;
    private ISaverActions m_SaverActionsCallbackInterface;
    private readonly InputAction m_Saver_Save;
    private readonly InputAction m_Saver_Load;
    public struct SaverActions
    {
        private @SaveInput m_Wrapper;
        public SaverActions(@SaveInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Save => m_Wrapper.m_Saver_Save;
        public InputAction @Load => m_Wrapper.m_Saver_Load;
        public InputActionMap Get() { return m_Wrapper.m_Saver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SaverActions set) { return set.Get(); }
        public void SetCallbacks(ISaverActions instance)
        {
            if (m_Wrapper.m_SaverActionsCallbackInterface != null)
            {
                @Save.started -= m_Wrapper.m_SaverActionsCallbackInterface.OnSave;
                @Save.performed -= m_Wrapper.m_SaverActionsCallbackInterface.OnSave;
                @Save.canceled -= m_Wrapper.m_SaverActionsCallbackInterface.OnSave;
                @Load.started -= m_Wrapper.m_SaverActionsCallbackInterface.OnLoad;
                @Load.performed -= m_Wrapper.m_SaverActionsCallbackInterface.OnLoad;
                @Load.canceled -= m_Wrapper.m_SaverActionsCallbackInterface.OnLoad;
            }
            m_Wrapper.m_SaverActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Save.started += instance.OnSave;
                @Save.performed += instance.OnSave;
                @Save.canceled += instance.OnSave;
                @Load.started += instance.OnLoad;
                @Load.performed += instance.OnLoad;
                @Load.canceled += instance.OnLoad;
            }
        }
    }
    public SaverActions @Saver => new SaverActions(this);
    public interface ISaverActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
